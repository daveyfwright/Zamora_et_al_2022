clear();
#setwd("/Users/davey/Documents/RB/RevBayes_Projects/");	#CHANGE THIS TO THE FOLDER IN WHICH YOU HAVE REVBAYES SCRIPTS & DATA!!!

### This director needs three subdirectories (folders):
#     RevBayes_Projects/scripts (additional RevBayes routines that will be used)
#     RevBayes_Projects/data (holds data matrices & taxonomic information)
#     RevBayes_Projects/output (where trees & logs will be sent)


setwd("/Users/davey/Documents/Cinctan_Bohemia/MCMC")

#source("scripts/Cinctans/Cincta_Skyline_Three_Interval_MCMC.rev");


###############################################################################
# This is (these are) the nexus file(s) that you are using for this analysis  #
#     Make sure that filenames & directories are correct!!!
###############################################################################
#filenames <- v("data/Cincta_Matrix_2_States.nex", "data/Cincta_Matrix_3_States.nex", "data/Cincta_Matrix_4_States.nex");
#filenames <- v("data/Cincta_Matrix_2_States_Nonfeeding.nex", "data/Cincta_Matrix_2_States_Feeding.nex", "data/Cincta_Matrix_3_States_Nonfeeding.nex", "data/Cincta_Matrix_3_States_Feeding.nex", "data/Cincta_Matrix_4_States_Nonfeeding.nex");
#partition_chars <- v(27,8,17,4,1);
#partition_states <- v(2,2,3,3,4);
#partition_ordering <- v("unordered","unordered","unordered","unordered","unordered");
#coding_bias <- v("all","all","variable","variable","variable");	## prepare for ascertainment bias in binary characters; 'all': invariant & autapomorphies present; 'variable': all vary & autapomorphies present; 'informative': all vary & no autapomorphies.
#rate_partitions <- v("Nonfeeding","Feeding","Nonfeeding","Feeding","Nonfeeding");	# rate partition for each character paritition
#rate_partition_labels <- v("Nonfeeding","Feeding");	# names of rate partitions
#ttl_rate_partitions <- 2;	

#partition_chars <- v(35,21,1);
#partition_states <- v(2,3,4);
#partition_ordering <- v("unordered","unordered","unordered");
#coding_bias <- v("all","variable","variable");	## prepare for ascertainment bias in binary characters; 'all': invariant & autapomorphies present; 'variable': all vary & autapomorphies present; 'informative': all vary & no autapomorphies.
#max_age <- 7.3;						# used if clock_model=="big_bang";


filenames <- v("data/pruned_3.nex", "data/pruned_4.nex");

ttl_rate_partitions <- 1;	
partition_ordering <- v("unordered","unordered");
partition_states <- v(2,3);
partition_chars <- v(29,28);
coding_bias <- v("all","all");

outgroup = clade("Ctenocystis_utahensis");
#ingroup = clade("Gyrocystis_platessa","Gyrocystis_testudiformis","Gyrocystis_cruzae","Gyrocystis_badulesiensis","Gyrocystis_erecta","Progyrocystis_disjuncta","Protocinctus_mansillaensis","Elliptocinctus_barrandei","Elliptocinctus_vizcainoi","Sucocystis_theronensis","Sucocystis_bretoni","Lignanicystis_barriosensis","Undatacinctus_undata","Sucocystis_acrofera","Undatacinctus_quadricornuta","Undatacinctus_melendezi","Asturicystis_jaekeli","Sotocinctus_ubaghsi","Trochocystites_bohemicus","Trochocystoides_parvus","Ludwigicinctus_truncatus","Graciacystis_ambigua","Asturicystis_havliceki","Nelegerocystis_ivantzovi","Rozanovicystis_triangularis","Davidocinctus_pembrokensis");

ingroup = clade("Gyrocystis_platessa","Gyrocystis_testudiformis","Gyrocystis_cruzae","Gyrocystis_badulesiensis","Gyrocystis_erecta","Progyrocystis_disjuncta","Protocinctus_mansillaensis","Elliptocinctus_barrandei","Elliptocinctus_vizcainoi","Sucocystis_theronensis","Sucocystis_bretoni","Lignanicystis_barriosensis","Undatacinctus_undata","Sucocystis_acrofera","Undatacinctus_quadricornuta","Undatacinctus_melendezi","Asturicystis_jaekeli","Sotocinctus_ubaghsi","Trochocystites_bohemicus","Trochocystoides_parvus","Ludwigicinctus_truncatus","Graciacystis_ambigua","Asturicystis_havliceki");

among_char_var <- "lognormal";			# enter "gamma" or "lognormal"
clock_model <- "uncorrelated";		# enter "strict" for strict clock, "uncorrelated" for relaxed clock with lognormal; "autocorrelated" for autocorrelated with lognormal shifts, "big bang" for early burst
#unscored_taxa <- v(24,25,26,27);

############################################################################
#          Set a variable for the number of character partitions           #
############################################################################
n_data_subsets <- filenames.size();
taxa <- readTaxonData(file="data/pruned_cincta_fossil_intervals_FAs.tsv");

#taxa <- readTaxonData(file="data/pruned_cincta_fossil_intervals_FA.tsv");
n_taxa <- taxa.size();
n_branches <- (2 * n_taxa) - 2;
moves = VectorMoves();

############################################################################
# Set up appropriate parameters for speciation, extinction & sampling.     #
#      We also set up the tree search here.                                #
#                                                                          #
# NOTE: This will sometimes freeze; if it does, then edit the script so    #
#      origination & extinction are set to 1.0. This usually works!        #
############################################################################
source("scripts/Skyline_Three_intervals.Rev");

############################################################################
# Set up appropriate Q-matrices for the partitions
#   as well as the among-character and among-branch
#   rate variation models
#  (Again, make sure that the directory is OK)
############################################################################
source("scripts/Accio_Parameters_for_Analysis_Partitioned_by_States_and_Ordering_and_Class.Rev");

############################################################################
# Wrap it all into your model
############################################################################
mymodel = model(tau,Q);		# tau should have FBD & character evolution models attached to it

############################################################################
# Add monitors & commence MCMC'ing
#  (Again, make sure that the source directory is OK)
# NOTE: the program saves trees once every printgen generations; so, the
#   lower the number, the more trees you save.
############################################################################
monitors = VectorMonitors();
## alter the file names to better reflect the analysis (e.g., cincta_early_burst_relaxed_clock.log and cincta_early_burst_relaxed_clock.trees)
monitors.append(mnModel(filename="output/cincta_relaxed_clock_Skyline_Three_intervals_MCMC3log", printgen=10));
#monitors.append(mnFile(pruned_fbd_tree, filename="output/cincta_relaxed_clock_Skyline_Three_intervals_MCMC3.trees",printgen=10,separator=TAB,tau));
monitors.append(mnFile(tau, filename="output/cincta_relaxed_clock_Skyline_Three_intervals_MCMC3.trees",printgen=10,separator=TAB,tau));

#monitors.append(mnScreen(printgen=100,mean_rt,init_branch_rate,acln_sigma,fbd_p,fbd_q,fbd_r,num_samp_anc,origin_time,summed_gaps));
monitors.append(mnScreen(printgen=100,mean_rt,fbd_p,fbd_q,fbd_r,num_samp_anc,origin_time,summed_gaps));

################################################################################
# Here are some starting parameters for your MCMC analysis: but use your own!
# NOTE: as the number of moves increases, the greater the number of generations
#     we need to make a thorough search of parameter space.  So, as taxa and
#     and complexity of character evolution models increases, the greater the
#     number of generations you should use.
################################################################################


cats=20;
burnin_gens=15000;	    # Number of generations for the burnin pre-analysis (to tune parameters).
tuning_int=200;		    # Frequency at which burnin analysis will tune parameters (in generations).
running_gens=70000; 	# Number of generations for the real analysis; the bigger the analysis, the more you usually need.

# MCMC

# setup analyses

no_runs=1;

mcmc_analysis = mcmc(mymodel, moves, monitors, nruns=no_runs);

# how long should the burnin be? #(retunes every tuning_int generations);
mcmc_analysis.burnin(generations=burnin_gens,tuningInterval=tuning_int);

# actual run after burnin.
mcmc_analysis.run(generations=running_gens);



tree_trace = readTreeTrace("output/cincta_relaxed_clock_Skyline_Three_intervals_MCMC3.trees", burnin=20);

con_tree = consensusTree(trace=tree_trace, cutoff=0.5, file="output/Three_interval_con_tree.tre");

mcc_tree = mccTree(trace=tree_trace, file="output/Three_Interval_MCC_tree.tre");
map_tree = mapTree(trace=tree_trace, file="output/MAPtree.tre");
